replicas: dict = {
    "start": "Здравствуйте!\nЯ бот для анализа предложений в Санкт-Петербурге на платформах недвижимости, таких как Циан или Авито.\nЧтобы начать работу, введите \"/begin\"",
    "selecting_action": "Приступим!\nДля начала укажите, что вы хотите сделать:",
    "selecting_city": "Отлично!\n Теперь из списка выберите город, для которого хотите узнать информацию:",
    "selecting_price": "Мы почти у цели.\n Но меня интересует, какой ценовой диапазон вы желаете просмотреть:",
    "selecting_platform": "Последний шаг. Укажите площадку недвижимости, информация с которой интересует:",
    "result_average_by_platform": "Средние цены квартир на площадках Авито и Циан:\n\nСредняя цена квартиры на Авито составляет {0} ₽.\nСредняя цена квартиры на Циан составляет {1} ₽.",
    "result_average_by_time": "Изменения средних цен на площадках Авито и Циан:\n\nВ период с {0} средняя цена на Авито изменилась с {1}₽ до {2}₽ - на {3}%.\n\nВ период с {4} средняя цена на Циан изменилась с {5}₽ до {6}₽ - на {7}%",
    "result_apartments_view": "Список новых квартир на площадке {0}:\n\n{1}",
    "error": "Приношу извинения, я не могу обработать ваш запрос.\nДолжно быть, я наткнулся на баг или ошибку :("
}
keyboards: dict = {
    "selecting_action": [
        "Cравнение средних цен по площадкам",
        "Сравнение средних цен за время",
        "Просмотр квартир"
    ],
    "selecting_city": [
        "Москва",
        "Санкт-петербург",
        "Новосибирск",
        "Екатеринбург"
    ],
    "selecting_price": [
        "< 2 000 000 ₽",
        "2 000 000 ₽ - 4 000 000 ₽",
        "4 000 000 ₽ - 7 000 000 ₽",
        "> 7 000 000 ₽",
        "Не имеет значения"
    ],
    "selecting_platform": ["Авито", "Циан"]
}
templates: dict = {
    "apartment_article": "{0}\n\nЦена: {1} ₽\n\nСсылка: {2}\n\n]|[---------------------------]|[\n\n"
}
actions_needing_platform = [2]


def get_replica(name):
    return replicas.get(name)


def get_inputs(name):
    return keyboards.get(name).copy()


def get_template(name):
    return templates.get(name)


def needing_platform(action):
    return action in actions_needing_platform
